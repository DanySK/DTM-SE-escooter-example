name: CI/CD
on:
  push: # Every time a new commit is pushed
    branches-ignore: # Except on branches with the following names (bots)
      - 'renovate/**'
      - 'dependabot/**'
    paths-ignore: # Or if the commit is only related to these files
      - 'CHANGELOG.md'
      - 'LICENSE'
      - 'README.md'
      - 'renovate.json'
      - '.gitignore'
  pull_request: # Always run if there is a pull request
  workflow_dispatch: # Enable launching the pipeline from the web interface

jobs:

  Build-Escooter-Service:
    runs-on: ubuntu-latest # Pick a Linux machine
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.0.2
      - name: Install all dependencies
        shell: bash
        working-directory: escooter-service
        run: npm install
      - name: Run the unit tests
        shell: bash
        working-directory: escooter-service
        run: npm test -- --watchAll=false
      - name: Check that the service can run
        shell: bash
        working-directory: escooter-service
        # There are no tests yet, so let's just make sure that the server starts
        run: | # This is YAML for multiline strings
          npm start &
          # Get the Process ID of the server
          PID="$( echo $! )"
          # Wait some time for the server to be up and running
          sleep 5
          # Check that there is some reply
          curl -sL http://127.0.0.1:5060
          # There has been no error, shut down the server
          # (it is a graceful shutdown, "kill" sends a TERM signal by default)
          kill $PID

  Build-User-App:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.0.2
      - name: Install all dependencies
        shell: bash
        working-directory: user-app
        run: npm install
      - name: Run the unit tests
        shell: bash
        working-directory: user-app
        run: npm test -- --watchAll=false
      - name: Try the server
        shell: bash
        working-directory: user-app
        # There are no tests yet, so let's just make sure that the server starts
        run: | # This is YAML for multiline strings
          npm start &
          # Get the Process ID of the server
          PID="$( echo $! )"
          # Wait some time for the server to be up and running
          sleep 5
          # Check that there is some reply
          curl -sL http://127.0.0.1:5300
          # There has been no error, shut down the server
          # (it is a graceful shutdown, "kill" sends a TERM signal by default)
          kill $PID

  Build-Company-Dashboard:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.0.2
      - name: Install all dependencies
        shell: bash
        working-directory: company-dashboard
        run: npm install
      - name: Run the unit tests
        shell: bash
        working-directory: company-dashboard
        run: npm test -- --watchAll=false
      - name: Try the server
        shell: bash
        working-directory: company-dashboard
        # There are no tests yet, so let's just make sure that the server starts
        run: | # This is YAML for multiline strings
          npm start &
          # Get the Process ID of the server
          PID="$( echo $! )"
          # Wait some time for the server to be up and running
          sleep 5
          # Check that there is some reply
          curl -sL http://127.0.0.1:5200
          # There has been no error, shut down the server
          # (it is a graceful shutdown, "kill" sends a TERM signal by default)
          kill $PID

  Build-Account-Service:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.0.2
      - name: Install all dependencies
        working-directory: account-service
        shell: bash
        run: npm install
      - name: Run the unit tests
        shell: bash
        working-directory: account-service
        run: npm test -- --watchAll=false
      - name: Try the server
        shell: bash
        working-directory: account-service
        # There are no tests yet, so let's just make sure that the server starts
        run: | # This is YAML for multiline strings
          npm start &
          # Get the Process ID of the server
          PID="$( echo $! )"
          # Wait some time for the server to be up and running
          sleep 5
          # Check that there is some reply
          curl -sL http://127.0.0.1:5050
          # There has been no error, shut down the server
          # (it is a graceful shutdown, "kill" sends a TERM signal by default)
          kill $PID

  Build-Renting-Service:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.0.2
      - name: Install all dependencies
        working-directory: renting-service
        shell: bash
        run: npm install
      - name: Run the unit tests
        shell: bash
        working-directory: renting-service
        run: npm test -- --watchAll=false
      - name: Try the server
        shell: bash
        working-directory: renting-service
        # There are no tests yet, so let's just make sure that the server starts
        run: | # This is YAML for multiline strings
          npm start &
          # Get the Process ID of the server
          PID="$( echo $! )"
          # Wait some time for the server to be up and running
          sleep 5
          # Check that there is some reply
          curl -sL http://127.0.0.1:5070
          # There has been no error, shut down the server
          # (it is a graceful shutdown, "kill" sends a TERM signal by default)
          kill $PID

  Build-Escooter-Agent-Simple:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.0.2
      - name: Install all dependencies
        working-directory: escooter-agent-simple
        shell: bash
        run: npm install
      - name: Run the unit tests
        shell: bash
        working-directory: escooter-agent-simple
        run: npm test -- --watchAll=false
      - name: Try the server
        shell: bash
        working-directory: escooter-agent-simple
        # There are no tests yet, so let's just make sure that the server starts
        run: | # This is YAML for multiline strings
          npm start &
          PID="$( echo $! )"
          sleep 5
          curl -sL http://127.0.0.1:5100
          kill $PID

  Build-Escooter-Agent:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.0.2
      - name: Read the version of Python
        id: python-version
        shell: bash
        working-directory: escooter-agent
        run: echo "::set-output name=version::$(cat .python-version)"
      - name: Install Python
        uses: actions/setup-python@v4.1.0
        with:
          python-version: ${{ steps.python-version.outputs.version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.1
      - name: Install dependencies
        shell: bash
        working-directory: escooter-agent
        run: poetry install
      - name: Run unit tests
        shell: bash
        working-directory: escooter-agent
        # We use unittest here instead of pytest, just to show one more framework
        run: poetry run python -m unittest discover

  Integration-Testing:
    needs:
      - Build-Escooter-Service
      - Build-User-App
      - Build-Company-Dashboard
      - Build-Escooter-Agent
      - Build-Escooter-Agent-Simple
      - Build-Account-Service
      - Build-Renting-Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.0.2
      - name: Launch docker-compose
        run: |
          docker-compose up &
          PID="$( echo $! )"
          sleep 120
          curl -sL http://127.0.0.1:5050
          curl -sL http://127.0.0.1:5060
          curl -sL http://127.0.0.1:5070
          curl -sL http://127.0.0.1:5100
          curl -sL http://127.0.0.1:5200
          curl -sL http://127.0.0.1:5300
          kill $PID

  Deploy:
    needs:
      - Integration-Testing
    runs-on: ubuntu-latest
    # Deploy only on the main repository (forks cannot deploy!)
    # Deploy only on new pushes or workflows triggered manually (pull requests cannot access the secrets)
    # Deploy only from the stable branch
    if: >- # Multiline YAML string where newlines get replaced with spaces
      contains(github.repository, 'DanySK/DTM-SE-escooter-example')
        && contains('push workflow_dispatch', github.event_name)
        && contains(github.ref, 'master')
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.0.2
      - name: Containerize the backend
        run: docker build -t ghcr.io/danysk/dtm-se-escooter-example-escooter-service:latest escooter-service
      - name: Containerize the account service
        run: docker build -t ghcr.io/danysk/dtm-se-escooter-example-account-service:latest account-service
      - name: Containerize the renting service
        run: docker build -t ghcr.io/danysk/dtm-se-escooter-example-renting-service:latest renting-service
      - name: Containerize the escooter agent
        run: docker build -t ghcr.io/danysk/dtm-se-escooter-example-escooter-agent:latest escooter-agent
      - name: Containerize the escooter agent simple
        run: docker build -t ghcr.io/danysk/dtm-se-escooter-example-escooter-agent-simple:latest escooter-agent-simple
      - name: Containerize the company dashboard
        run: docker build -t ghcr.io/danysk/dtm-se-escooter-example-company-dashboard:latest company-dashboard
      - name: Containerize the user app
        run: docker build -t ghcr.io/danysk/dtm-se-escooter-example-user-app:latest user-app
      - name: Login to the container registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u USERNAME --password-stdin
      - name: Deliver images on registry
        run: |
          docker push ghcr.io/danysk/dtm-se-escooter-example-escooter-service:latest
          docker push ghcr.io/danysk/dtm-se-escooter-example-account-service:latest
          docker push ghcr.io/danysk/dtm-se-escooter-example-renting-service:latest
          docker push ghcr.io/danysk/dtm-se-escooter-example-escooter-agent:latest
          docker push ghcr.io/danysk/dtm-se-escooter-example-escooter-agent-simple:latest
          docker push ghcr.io/danysk/dtm-se-escooter-example-company-dashboard:latest
          docker push ghcr.io/danysk/dtm-se-escooter-example-user-app:latest
